#!/bin/bash

set -ex

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

cd $source

payload=$(mktemp $TMPDIR/artifactory-resource-request.XXXXXX)

cat > $payload <&0

endpoint=$(jq -r '.source.endpoint // ""' < $payload)
regex=$(jq -r '.source.regex // ""' < $payload)
username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
ca_cert=$(jq -r '.source.ca_cert // ""' < $payload)

repository=$(jq -r '.source.repository // ""' < $payload)
file=$(jq -r '.params.file // ""' < $payload)
folder=$(jq -r '.params.folder // ""' < $payload)
paramRegex=$(jq -r '.params.regex // ""' < $payload)

version=$(jq -r '.version.version // ""' < $payload)

explode=$(jq -r '.params.explode // ""' < $payload)
threads=$(jq -r '.params.threads // ""' < $payload)

if [ -z "$endpoint" ]; then
  echo "invalid payload (missing endpoint)"
  exit 1
fi

if [ -z "$repository" ]; then
  echo "invalid payload (missing repository)"
  exit 1
fi

if [ -z "$version" ]; then
  echo "Missing version"
  exit 1
fi

if [ -n "$paramRegex" ]; then
  echo "overwriting source regex"
  regex=$paramRegex
fi

# Convert version matcher to a regular wildcard character
file_pattern=$(echo $regex | sed 's/(.*)/*/')
search_pattern=$(create_artifact_path $file_pattern $repository $folder)

file_json=$(in_file_with_version "$final_url" "$regex" "$version")
file=$(echo $file_json | jq -r '.[].uri')

if [ -z "$file" ]; then
  echo "file for version '$version' not found"
  exit 1
fi

explode_params=""
if [ -n "$explode" ]; then
  $explode_params="--explode=${explode}"
fi

thread_params=""
if [ -n "$threads" ]; then
  $thread_params="--threads=${threads}"
fi

configure_jfrog_client $endpoint $username $password
$ARTIFACTORY_CMD dl $explode_params $thread_params $full_path

echo $file_json | jq '.[].version | {version: {version: .}}' >&3