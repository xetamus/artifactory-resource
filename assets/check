#!/bin/bash

set -ex

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

payload=$(mktemp $TMPDIR/artifactory-resource-request.XXXXXX)

cat > $payload <&0

endpoint=$(jq -r '.source.endpoint // ""' < $payload)
regex=$(jq -r '.source.regex // ""' < $payload)
username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
ca_cert=$(jq -r '.source.ca_cert // ""' < $payload)

repository=$(jq -r '.source.repository // ""' < $payload)
file=$(jq -r '.params.file // ""' < $payload)
folder=$(jq -r '.params.folder // ""' < $payload)
paramRegex=$(jq -r '.params.regex // ""' < $payload)

version=$(jq -r '.version.version // ""' < $payload)

if [ -z "$endpoint" ]; then
  echo "invalid payload (missing endpoint)"
  exit 1
fi

if [ -z "$repository" ]; then
  echo "invalid payload (missing repository)"
  exit 1
fi

if [ -n "$paramRegex" ]; then
	echo "overwriting source regex"
	regex=$paramRegex
fi

# Convert version matcher to a regular wildcard character
file_pattern=$(echo $regex | sed 's/(.*)/*/')
search_pattern=$(create_artifact_path $regex $repository $folder)

configure_jfrog_client $endpoint $username $password

if [ -z "${version}" ]; then
  echo "empty version - return current version"
  artifactory_current_version "$search_pattern" "$regex" >&3
else
  check_version "$search_pattern" "$regex" "$version" >&3
fi
